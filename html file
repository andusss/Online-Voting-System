<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Online Voting System</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Inter', sans-serif;
        }
        .view {
            display: none;
        }
        .view.active {
            display: block;
        }
        /* Simple animation for view transitions */
        .view {
            animation: fadeIn 0.5s ease-in-out;
        }
        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(10px); }
            to { opacity: 1; transform: translateY(0); }
        }
        /* Modal styles */
        .modal-overlay {
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background-color: rgba(0, 0, 0, 0.6);
            display: flex;
            align-items: center;
            justify-content: center;
            z-index: 1000;
            transition: opacity 0.3s ease;
        }
        .modal {
            background-color: white;
            padding: 2.5rem;
            border-radius: 0.75rem;
            box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
            max-width: 450px;
            width: 90%;
            text-align: center;
            transform: scale(0.95);
            transition: transform 0.3s ease;
        }
        .modal-overlay:not(.hidden) .modal {
            transform: scale(1);
        }
    </style>
</head>
<body class="bg-gray-100 text-gray-800">

    <!-- Main Container -->
    <div id="app" class="container mx-auto p-4 md:p-8 max-w-4xl">
        
        <!-- Header -->
        <header class="bg-white shadow-md rounded-lg p-6 mb-8 flex justify-between items-center">
            <div>
                <h1 class="text-3xl font-bold text-gray-900">Online Voting System</h1>
                <p class="text-gray-500">Secure, Private, and Reliable</p>
            </div>
            <div id="user-info" class="text-right">
                <!-- User email and logout button will be injected here -->
            </div>
        </header>

        <!-- Loading Spinner -->
        <div id="loading" class="text-center p-8 view active">
            <svg class="animate-spin h-10 w-10 text-blue-600 mx-auto" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
            </svg>
            <p class="mt-4 text-gray-600">Initializing System...</p>
        </div>

        <!-- Welcome View -->
        <div id="welcome-view" class="bg-white p-8 rounded-lg shadow-md view text-center">
            <h2 class="text-2xl font-bold mb-4">Welcome to the Platform</h2>
            <p class="text-gray-600 mb-8">Please login to cast your vote or register if you don't have an account.</p>
            <div class="flex flex-col sm:flex-row justify-center gap-4">
                <button id="go-to-login-btn" class="w-full sm:w-auto bg-blue-600 text-white py-3 px-8 rounded-lg hover:bg-blue-700 transition duration-300 text-lg">Login</button>
                <button id="go-to-register-btn" class="w-full sm:w-auto bg-green-600 text-white py-3 px-8 rounded-lg hover:bg-green-700 transition duration-300 text-lg">Register</button>
            </div>
        </div>
        
        <!-- Login View -->
        <div id="login-view" class="bg-white p-8 rounded-lg shadow-md view">
             <h2 class="text-2xl font-bold mb-6 text-center">Login to Your Account</h2>
             <form id="login-form" class="max-w-md mx-auto">
                 <div class="mb-4">
                     <label for="login-email" class="block text-gray-700 mb-2">Email</label>
                     <input type="email" id="login-email" class="w-full px-4 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500" required>
                 </div>
                 <div class="mb-4">
                     <label for="login-password" class="block text-gray-700 mb-2">Password</label>
                     <input type="password" id="login-password" class="w-full px-4 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500" required>
                 </div>
                 <button type="submit" class="w-full bg-blue-600 text-white py-2 rounded-lg hover:bg-blue-700 transition duration-300">Login</button>
                 <p id="login-error" class="text-red-500 text-sm mt-2 text-center"></p>
             </form>
             <p class="text-center mt-6">
                 Don't have an account? <a href="#" id="switch-to-register" class="text-blue-600 hover:underline">Register here</a>
             </p>
        </div>
        
        <!-- Register View -->
        <div id="register-view" class="bg-white p-8 rounded-lg shadow-md view">
            <h2 class="text-2xl font-bold mb-6 text-center">Create a New Account</h2>
            <form id="register-form" class="max-w-md mx-auto">
                <div class="mb-4">
                    <label for="register-name" class="block text-gray-700 mb-2">Full Name</label>
                    <input type="text" id="register-name" class="w-full px-4 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500" required>
                </div>
                <div class="mb-4">
                    <label for="register-email" class="block text-gray-700 mb-2">Email</label>
                    <input type="email" id="register-email" class="w-full px-4 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500" required>
                </div>
                <div class="mb-4">
                    <label for="register-password" class="block text-gray-700 mb-2">Password</label>
                    <input type="password" id="register-password" class="w-full px-4 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500" required minlength="6">
                </div>
                <button type="submit" class="w-full bg-green-600 text-white py-2 rounded-lg hover:bg-green-700 transition duration-300">Register</button>
                <p id="register-error" class="text-red-500 text-sm mt-2 text-center"></p>
            </form>
             <p class="text-center mt-6">
                 Already have an account? <a href="#" id="switch-to-login" class="text-blue-600 hover:underline">Login here</a>
             </p>
        </div>


        <!-- Dashboard View -->
        <div id="dashboard-view" class="view">
            <div id="vote-casting-section" class="bg-white p-8 rounded-lg shadow-md">
                 <h2 class="text-2xl font-bold mb-6 text-center">Cast Your Vote</h2>
                 <div id="candidates-list" class="space-y-4">
                     <!-- Candidates will be dynamically injected here -->
                 </div>
                 <div id="vote-feedback" class="mt-6 text-center font-semibold"></div>
            </div>
            <div class="mt-6 text-center">
                <button id="view-results-btn" class="bg-gray-700 text-white py-2 px-6 rounded-lg hover:bg-gray-800 transition duration-300">View Live Results</button>
            </div>
        </div>

        <!-- Results View -->
        <div id="results-view" class="bg-white p-8 rounded-lg shadow-md view">
            <h2 class="text-2xl font-bold mb-6 text-center">Election Results</h2>
            <div id="results-container" class="space-y-6">
                <!-- Results will be dynamically injected here -->
            </div>
            <div class="mt-8 text-center">
                 <button id="back-to-dashboard-btn" class="bg-blue-600 text-white py-2 px-6 rounded-lg hover:bg-blue-700 transition duration-300">Back to Dashboard</button>
            </div>
        </div>

    </div>

    <!-- Confirmation Modal -->
    <div id="confirmation-modal" class="modal-overlay hidden">
        <div class="modal">
            <p id="modal-text" class="mb-6 text-lg"></p>
            <div class="flex justify-center space-x-4">
                <button id="modal-confirm-btn" class="bg-blue-600 text-white py-2 px-6 rounded-lg hover:bg-blue-700">Confirm</button>
                <button id="modal-cancel-btn" class="bg-gray-300 text-gray-800 py-2 px-6 rounded-lg hover:bg-gray-400">Cancel</button>
            </div>
        </div>
    </div>
    
    <!-- Info Modal -->
    <div id="info-modal" class="modal-overlay hidden">
        <div class="modal">
            <p id="info-modal-text" class="mb-6 text-lg text-gray-800"></p>
            <button id="info-modal-ok-btn" class="bg-blue-600 text-white py-2 px-8 rounded-lg hover:bg-blue-700">OK</button>
        </div>
    </div>


    <script type="module">
        // Firebase Imports
        import { initializeApp } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-app.js";
        import { 
            getAuth, 
            createUserWithEmailAndPassword, 
            signInWithEmailAndPassword, 
            signOut, 
            onAuthStateChanged,
            signInAnonymously,
            signInWithCustomToken
        } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-auth.js";
        import { 
            getFirestore, 
            doc, 
            setDoc, 
            getDoc, 
            collection, 
            onSnapshot,
            runTransaction,
            addDoc,
            serverTimestamp,
            writeBatch
        } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-firestore.js";

        // --- Firebase Configuration ---
        // Replace this with your actual Firebase config object
        const firebaseConfig = {
            apiKey: "AIzaSyDQbVLFLYJHfwQG0D1s4cbRo7unAjnbctM",
            authDomain: "online-voting-platform-aefcc.firebaseapp.com",
            projectId: "online-voting-platform-aefcc",
            storageBucket: "online-voting-platform-aefcc.firebasestorage.app",
            messagingSenderId: "236168503173",
            appId: "1:236168503173:web:b744b78e19425282382eec",
            measurementId: "G-YVY37DE9YJ"
          };
        
        let app, auth, db;
        const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-voting-app';
        
        // --- App State ---
        let currentUserData = null;
        let candidates = [];
        let totalVotes = 0;

        // --- DOM Elements ---
        const loadingView = document.getElementById('loading');
        const welcomeView = document.getElementById('welcome-view');
        const loginView = document.getElementById('login-view');
        const registerView = document.getElementById('register-view');
        const dashboardView = document.getElementById('dashboard-view');
        const resultsView = document.getElementById('results-view');
        const views = document.querySelectorAll('.view');
        const userInfoDiv = document.getElementById('user-info');
        
        // --- View Management ---
        const showView = (viewId) => {
            views.forEach(view => view.classList.remove('active'));
            document.getElementById(viewId).classList.add('active');
        };

        // --- Initialization ---
        async function initializeFirebase() {
            try {
                const config = typeof __firebase_config !== 'undefined' ? JSON.parse(__firebase_config) : firebaseConfig;
                app = initializeApp(config);
                auth = getAuth(app);
                db = getFirestore(app);

                if (typeof __initial_auth_token !== 'undefined' && __initial_auth_token) {
                    await signInWithCustomToken(auth, __initial_auth_token);
                } else {
                    await signInAnonymously(auth);
                }
                
                setupAuthListener();

            } catch (error) {
                console.error("Firebase initialization failed:", error);
                loadingView.innerHTML = `<p class="text-red-500">Error: Could not connect to the system. Please try again later.</p>`;
            }
        }
        
        // --- Firestore Path Helpers ---
        const getCandidatesCollectionRef = () => collection(db, `artifacts/${appId}/public/data/candidates`);
        const getUserDocRef = (uid) => doc(db, `artifacts/${appId}/public/data/users`, uid);

        // --- Authentication ---
        function setupAuthListener() {
            onAuthStateChanged(auth, async (user) => {
                if (user && !user.isAnonymous) {
                    await fetchUserData(user.uid);
                    updateUserInfoUI(user);
                    if (currentUserData) {
                        showView('dashboard-view');
                        renderDashboard();
                    } else {
                        showView('welcome-view');
                    }
                } else {
                    currentUserData = null;
                    updateUserInfoUI(null);
                    showView('welcome-view');
                }
                loadingView.classList.remove('active');
                
                setupCandidateListener();
            });
        }

        async function fetchUserData(uid) {
            const userDocRef = getUserDocRef(uid);
            const userDocSnap = await getDoc(userDocRef);
            if (userDocSnap.exists()) {
                currentUserData = { uid, ...userDocSnap.data() };
            }
        }

        document.getElementById('register-form').addEventListener('submit', async (e) => {
            e.preventDefault();
            const name = document.getElementById('register-name').value;
            const email = document.getElementById('register-email').value;
            const password = document.getElementById('register-password').value;
            const errorEl = document.getElementById('register-error');
            errorEl.textContent = '';

            try {
                const userCredential = await createUserWithEmailAndPassword(auth, email, password);
                const user = userCredential.user;
                
                await setDoc(getUserDocRef(user.uid), {
                    name: name,
                    email: email,
                    hasVoted: false,
                    registeredAt: serverTimestamp()
                });

                // Important: Sign out the user so they have to login manually
                await signOut(auth);

                showInfoModal("Registration successful! Please log in to continue.", () => {
                    showView('login-view');
                });

            } catch (error) {
                console.error("Registration error: ", error);
                errorEl.textContent = error.message;
            }
        });

        document.getElementById('login-form').addEventListener('submit', async (e) => {
            e.preventDefault();
            const email = document.getElementById('login-email').value;
            const password = document.getElementById('login-password').value;
            const errorEl = document.getElementById('login-error');
            errorEl.textContent = '';

            try {
                await signInWithEmailAndPassword(auth, email, password);
            } catch (error) {
                console.error("Login error: ", error);
                errorEl.textContent = "Invalid email or password.";
            }
        });

        function handleLogout() {
            signOut(auth).catch(error => console.error("Logout error:", error));
        }

        // --- UI Rendering ---
        function updateUserInfoUI(user) {
            userInfoDiv.innerHTML = '';
            if (user && !user.isAnonymous) {
                const userEmailEl = document.createElement('p');
                userEmailEl.textContent = user.email;
                userEmailEl.className = 'text-sm text-gray-600';
                
                const logoutButton = document.createElement('button');
                logoutButton.textContent = 'Logout';
                logoutButton.className = 'mt-1 bg-red-500 text-white text-xs py-1 px-3 rounded-md hover:bg-red-600 transition';
                logoutButton.onclick = handleLogout;

                userInfoDiv.appendChild(userEmailEl);
                userInfoDiv.appendChild(logoutButton);
            }
        }

        // --- Realtime Data (Firestore) ---
        async function setupCandidateListener() {
            const candidatesColRef = getCandidatesCollectionRef();
            const initialSnapshot = await getDoc(doc(candidatesColRef, 'candidate-1'));
            if (!initialSnapshot.exists()) {
                await addDefaultCandidates();
            }

            onSnapshot(candidatesColRef, (snapshot) => {
                candidates = [];
                totalVotes = 0;
                snapshot.forEach(doc => {
                    const candidateData = doc.data();
                    candidates.push({ id: doc.id, ...candidateData });
                    totalVotes += candidateData.votes;
                });
                
                candidates.sort((a, b) => a.name.localeCompare(b.name));
                
                if (auth.currentUser && !auth.currentUser.isAnonymous) {
                    renderDashboard();
                }
                renderResults();
            });
        }
        
        async function addDefaultCandidates() {
            console.log("Setting up default candidates...");
            const defaultCandidates = [
                { id: "candidate-1", name: "Alice Johnson", party: "Future Forward", votes: 0, color: 'bg-blue-500' },
                { id: "candidate-2", name: "Bob Williams", party: "Unity Alliance", votes: 0, color: 'bg-green-500' },
                { id: "candidate-3", name: "Charlie Brown", party: "People's Voice", votes: 0, color: 'bg-yellow-500' },
                { id: "candidate-4", name: "Diana Prince", party: "Liberty Party", votes: 0, color: 'bg-purple-500' }
            ];
            
            const batch = writeBatch(db);
            const candidatesColRef = getCandidatesCollectionRef();
            defaultCandidates.forEach(cand => {
                const docRef = doc(candidatesColRef, cand.id);
                 batch.set(docRef, {
                    name: cand.name, party: cand.party, votes: cand.votes, color: cand.color
                });
            });
            await batch.commit();
        }

        function renderDashboard() {
            const candidatesList = document.getElementById('candidates-list');
            const voteFeedback = document.getElementById('vote-feedback');
            candidatesList.innerHTML = '';
            if (!currentUserData) return;

            if (currentUserData.hasVoted) {
                voteFeedback.innerHTML = `<p class="text-green-600 text-xl">Thank you! Your vote has been recorded.</p>`;
            } else {
                 voteFeedback.innerHTML = `<p class="text-gray-600">Select a candidate below to cast your vote.</p>`;
            }
            
            candidates.forEach(candidate => {
                const canDiv = document.createElement('div');
                canDiv.className = 'border p-4 rounded-lg flex justify-between items-center transition hover:shadow-lg';
                canDiv.innerHTML = `
                    <div>
                        <h3 class="text-lg font-semibold">${candidate.name}</h3>
                        <p class="text-sm text-gray-500">${candidate.party}</p>
                    </div>
                    <button data-id="${candidate.id}" class="vote-btn bg-blue-600 text-white py-2 px-5 rounded-lg hover:bg-blue-700 disabled:bg-gray-400 disabled:cursor-not-allowed transition">Vote</button>
                `;
                candidatesList.appendChild(canDiv);
            });
            
            document.querySelectorAll('.vote-btn').forEach(button => {
                if (currentUserData.hasVoted) {
                    button.disabled = true;
                }
                button.addEventListener('click', () => handleVote(button.dataset.id));
            });
        }

        function renderResults() {
            const resultsContainer = document.getElementById('results-container');
            resultsContainer.innerHTML = '';
            const totalVotesDisplay = document.createElement('p');
            totalVotesDisplay.className = 'text-center text-lg font-medium mb-6';
            totalVotesDisplay.innerHTML = `Total Votes Cast: <span class="font-bold text-blue-700">${totalVotes}</span>`;
            resultsContainer.appendChild(totalVotesDisplay);

            if (candidates.length === 0) {
                 resultsContainer.innerHTML += '<p>No results to display yet.</p>';
                 return;
            }

            candidates.sort((a,b) => b.votes - a.votes).forEach(candidate => {
                const percentage = totalVotes > 0 ? ((candidate.votes / totalVotes) * 100).toFixed(2) : 0;
                const resDiv = document.createElement('div');
                resDiv.className = 'mb-4';
                resDiv.innerHTML = `
                    <div class="flex justify-between items-center mb-1">
                        <span class="font-semibold">${candidate.name} (${candidate.party})</span>
                        <span class="text-sm font-medium text-gray-700">${candidate.votes} Votes (${percentage}%)</span>
                    </div>
                    <div class="w-full bg-gray-200 rounded-full h-4">
                        <div class="${candidate.color} h-4 rounded-full" style="width: ${percentage}%"></div>
                    </div>
                `;
                resultsContainer.appendChild(resDiv);
            });
        }

        // --- Modal Logic ---
        const confirmModal = document.getElementById('confirmation-modal');
        const modalText = document.getElementById('modal-text');
        const confirmBtn = document.getElementById('modal-confirm-btn');
        const cancelBtn = document.getElementById('modal-cancel-btn');
        let confirmCallback = null;

        function showConfirmationModal(text, onConfirm) {
            modalText.textContent = text;
            confirmCallback = onConfirm;
            confirmModal.classList.remove('hidden');
        }

        function hideConfirmationModal() {
            confirmModal.classList.add('hidden');
            confirmCallback = null;
        }

        confirmBtn.addEventListener('click', () => {
            if (confirmCallback) confirmCallback();
            hideConfirmationModal();
        });
        cancelBtn.addEventListener('click', hideConfirmationModal);

        const infoModal = document.getElementById('info-modal');
        const infoModalText = document.getElementById('info-modal-text');
        const infoModalOkBtn = document.getElementById('info-modal-ok-btn');
        let infoModalCallback = null;

        function showInfoModal(text, onOk) {
            infoModalText.textContent = text;
            infoModalCallback = onOk;
            infoModal.classList.remove('hidden');
        }

        infoModalOkBtn.addEventListener('click', () => {
            infoModal.classList.add('hidden');
            if (infoModalCallback) infoModalCallback();
        });


        // --- Voting Logic ---
        function handleVote(candidateId) {
            const voteFeedback = document.getElementById('vote-feedback');
            if (currentUserData.hasVoted) {
                voteFeedback.innerHTML = `<p class="text-yellow-600">You have already voted.</p>`;
                return;
            }
            
            const candidate = candidates.find(c => c.id === candidateId);
            if (!candidate) return;

            showConfirmationModal(`Are you sure you want to vote for ${candidate.name}? This action cannot be undone.`, () => {
                castVote(candidateId);
            });
        }

        async function castVote(candidateId) {
            const voteFeedback = document.getElementById('vote-feedback');
            const userDocRef = getUserDocRef(currentUserData.uid);
            const candidateDocRef = doc(getCandidatesCollectionRef(), candidateId);

            try {
                await runTransaction(db, async (transaction) => {
                    const userDoc = await transaction.get(userDocRef);
                    if (!userDoc.exists() || userDoc.data().hasVoted) {
                        throw new Error("User has already voted or does not exist.");
                    }
                    
                    const candidateDoc = await transaction.get(candidateDocRef);
                    if (!candidateDoc.exists()) {
                         throw new Error("Candidate does not exist.");
                    }
                    const newVoteCount = candidateDoc.data().votes + 1;

                    transaction.update(candidateDocRef, { votes: newVoteCount });
                    transaction.update(userDocRef, { hasVoted: true });
                });
                
                currentUserData.hasVoted = true;
                renderDashboard();
                
            } catch (error) {
                console.error("Voting transaction failed: ", error);
                voteFeedback.innerHTML = `<p class="text-red-500">There was an error casting your vote. Please try again.</p>`;
            }
        }
        
        // --- Event Listeners for Navigation ---
        document.getElementById('go-to-login-btn').addEventListener('click', () => showView('login-view'));
        document.getElementById('go-to-register-btn').addEventListener('click', () => showView('register-view'));
        document.getElementById('switch-to-register').addEventListener('click', (e) => { e.preventDefault(); showView('register-view'); });
        document.getElementById('switch-to-login').addEventListener('click', (e) => { e.preventDefault(); showView('login-view'); });
        
        document.getElementById('view-results-btn').addEventListener('click', () => showView('results-view'));
        document.getElementById('back-to-dashboard-btn').addEventListener('click', () => showView('dashboard-view'));

        // --- Start the App ---
        initializeFirebase();

    </script>
</body>
</html>

